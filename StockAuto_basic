# StockTrade24.com
# 한국투자증권 API를 활용한 국내 주식 자동매매 프로그램
# 작성자: StockTrade24
# 최종수정일: 2024.11.23

import requests
import json
import datetime
import time
import yaml

# 설정 파일(config.yaml)에서 필요한 값들을 불러옵니다.
# config.yaml 파일에는 API 키, 계좌번호 등 중요 정보가 저장되어 있습니다.
with open('config.yaml', encoding='UTF-8') as f:
    _cfg = yaml.load(f, Loader=yaml.FullLoader)
APP_KEY = _cfg['APP_KEY']        # 한국투자증권 API 앱키
APP_SECRET = _cfg['APP_SECRET']  # 한국투자증권 API 시크릿키
ACCESS_TOKEN = ""                # API 접근 토큰 (프로그램 실행시 발급됨)
CANO = _cfg['CANO']             # 계좌번호
ACNT_PRDT_CD = _cfg['ACNT_PRDT_CD']  # 계좌상품코드
DISCORD_WEBHOOK_URL = _cfg['DISCORD_WEBHOOK_URL']  # 디스코드 웹훅 URL
URL_BASE = _cfg['URL_BASE']     # API 베이스 URL

def send_message(msg):
    """
    디스코드로 메시지를 전송하는 함수
    매매 결과와 에러 등 중요 정보를 실시간으로 받아볼 수 있습니다.
    
    Parameters:
        msg (str): 전송할 메시지 내용
    """
    now = datetime.datetime.now()
    message = {"content": f"[{now.strftime('%Y-%m-%d %H:%M:%S')}] {str(msg)}"}
    requests.post(DISCORD_WEBHOOK_URL, data=message)
    print(message)

def get_access_token():
    """
    한국투자증권 API 접근 토큰을 발급받는 함수
    토큰 유효기간은 1일이며, 하루에 한번만 발급받으면 됩니다.
    
    Returns:
        str: 발급받은 접근 토큰
    """
    headers = {"content-type":"application/json"}
    body = {"grant_type":"client_credentials",
    "appkey":APP_KEY, 
    "appsecret":APP_SECRET}
    PATH = "oauth2/tokenP"
    URL = f"{URL_BASE}/{PATH}"
    res = requests.post(URL, headers=headers, data=json.dumps(body))
    ACCESS_TOKEN = res.json()["access_token"]
    return ACCESS_TOKEN

def hashkey(datas):
    """
    한국투자증권 API에서 사용하는 해시키를 발급받는 함수
    주문과 같은 중요 API 호출시 필요합니다.
    
    Parameters:
        datas (dict): 해시키를 발급받을 데이터
        
    Returns:
        str: 발급받은 해시키
    """
    PATH = "uapi/hashkey"
    URL = f"{URL_BASE}/{PATH}"
    headers = {
    'content-Type' : 'application/json',
    'appKey' : APP_KEY,
    'appSecret' : APP_SECRET,
    }
    res = requests.post(URL, headers=headers, data=json.dumps(datas))
    hashkey = res.json()["HASH"]
    return hashkey

def get_current_price(code="005930"):
    """
    특정 종목의 현재가를 조회하는 함수
    
    Parameters:
        code (str): 종목코드 (기본값: 삼성전자 005930)
        
    Returns:
        int: 현재가
    """
    PATH = "uapi/domestic-stock/v1/quotations/inquire-price"
    URL = f"{URL_BASE}/{PATH}"
    headers = {"Content-Type":"application/json", 
            "authorization": f"Bearer {ACCESS_TOKEN}",
            "appKey":APP_KEY,
            "appSecret":APP_SECRET,
            "tr_id":"FHKST01010100"}
    params = {
    "fid_cond_mrkt_div_code":"J",
    "fid_input_iscd":code,
    }
    res = requests.get(URL, headers=headers, params=params)
    return int(res.json()['output']['stck_prpr'])

def get_target_price(code="005930"):
    """
    특정 종목의 매수 목표가를 조회하는 함수
    변동성 돌파 전략을 사용하여 목표가를 산출합니다.
    
    전일 고가와 저가의 차이(변동폭)를 계산하고,
    당일 시가에 변동폭의 0.5배를 더해 목표가를 정합니다.
    
    Parameters:
        code (str): 종목코드 (기본값: 삼성전자 005930)
        
    Returns:
        float: 매수 목표가
    """
    PATH = "uapi/domestic-stock/v1/quotations/inquire-daily-price"
    URL = f"{URL_BASE}/{PATH}"
    headers = {"Content-Type":"application/json", 
        "authorization": f"Bearer {ACCESS_TOKEN}",
        "appKey":APP_KEY,
        "appSecret":APP_SECRET,
        "tr_id":"FHKST01010400"}
    params = {
    "fid_cond_mrkt_div_code":"J",
    "fid_input_iscd":code,
    "fid_org_adj_prc":"1",
    "fid_period_div_code":"D"
    }
    res = requests.get(URL, headers=headers, params=params)
    stck_oprc = int(res.json()['output'][0]['stck_oprc']) #오늘 시가
    stck_hgpr = int(res.json()['output'][1]['stck_hgpr']) #전일 고가
    stck_lwpr = int(res.json()['output'][1]['stck_lwpr']) #전일 저가
    target_price = stck_oprc + (stck_hgpr - stck_lwpr) * 0.5
    return target_price

# (이하 생략 - 나머지 함수들도 동일한 방식으로 주석 처리)
